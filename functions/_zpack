#compdef zpack

function _zpack_compile() {
    _values -w options \
        '-M[mark as mapped]' \
        '-R[mark as read]' \
        '-U[don'"'"'t expand aliases]' \
        '-k[ksh-style autoloading]' \
        '-z[zsh-style autoloading]'
    _files
}

function _zpack_release() {
	_values -w options \
		'--completion[command to generate completions]' \
		'--pattern[glob pattern to match asset]' \
		'-p[glob pattern to match asset]' \
		'--list[list all availale releases and exit]' \
		'-l[list all availale releases and exit]'
}

function _zpack_snippet() {
	_values -w options \
        '--completion[only add to fpath]' \
		'--bin[add to path as binary]'
}

function _zpack_load() {
    _values -w options \
		'--completion[only add to fpath]' \
		'--before-load[command to run before load]' \
		'--after-load[command to run after load]'
}

function _zpack_omz() {
    _values -w options \
        '--completion[only add to fpath]'
}

function _zpack_bin() {
    _values -w options \
        '--name[define name (only when location is a file)]'
}

function _zpack_update() {
    _arguments '1:scope:((all\:"update zpack and plugins" self\:"update zpack" plugins\:"update plugins"))'
}

function _zpack() {
    _arguments '1: :->cmd' '*:: :->subcmd'

    case $state in
        cmd)
            local -a commands opts
            local line
            for help_line in "${(@f)$(< "$ZPACK_DIR/cmd.txt")}"; do
                commands+=( "${help_line//_}" )
            done
            opts=("-h:show help" "--help:show help")
            _describe commands commands
            _describe options opts
            ;;
        subcmd)
            local subcmd=$line[1]
            [[ ${+functions[_zpack_$subcmd]} == 1 ]] && _zpack_$subcmd;;
    esac
}

_zpack $@
